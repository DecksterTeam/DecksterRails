<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>mtheory</groupId>
  <artifactId>mtheory</artifactId>
  <version>0.1-SNAPSHOT</version>
  <packaging>war</packaging>

  <parent>
    <groupId>mtheory</groupId>
    <artifactId>mtheory-parent</artifactId>
    <version>0.1-SNAPSHOT</version>
  </parent>
  <dependencies>
    <dependency>
      <groupId>mws</groupId>
      <artifactId>mws-security-core</artifactId>
      <version>7.0.6</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>mws</groupId>
      <artifactId>mws-security-jblocks</artifactId>
      <version>7.0.6-MOCK2</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.2.5</version>
    </dependency>
    <dependency>
      <groupId>oneaa</groupId>
      <artifactId>oneaa-solr-repo</artifactId>
      <version>2.0-SNAPSHOT</version>
    </dependency>
  </dependencies>
  <build>
    <finalName>mtheory</finalName>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- This tasks only creates a basic structure
            expected by maven,
            so it can do its work -->
            <id>create-mock-web-descriptor</id>
            <phase>compile</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  mkdir -p src/main/webapp/WEB-INF
                  touch src/main/webapp/WEB-INF/web.xml
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <!-- Now in the package phase we copy the
            jar files that maven put into the fake
            web app to our rails' lib folder -->
            <id>copy-needed-jars-into-lib</id>
            <phase>package</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  rm -f lib/*.jar
                  cp target/mtheory/WEB-INF/lib/*.jar lib
                  rm -rf target/mtheory*
                  rm -rf src
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <!-- Here we optionally create the final war file
            containing our rails app using warbler,
            doing a small cleanup of the files
            and folders maven created  -->
            <id>create-final-war</id>
            <phase>package</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  rm -rf *.war tmp/war
                  jruby -S bundle exec warble
                  mv *.war target/mtheory.war
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
